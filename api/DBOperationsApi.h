/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DBOperationsApi.h
 *
 * 
 */

#ifndef DBOperationsApi_H_
#define DBOperationsApi_H_


#include "ApiClient.h"

#include "AddResponse.h"
#include "Body.h"
#include "Error.h"
#include "SetResponse.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  DBOperationsApi
{
public:
    DBOperationsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~DBOperationsApi();
    /// <summary>
    /// Add is used for adding a data object to the list created at Switch DB.
    /// </summary>
    /// <remarks>
    /// You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
    /// </remarks>
    /// <param name="aPIKey">Your Switch API Key.</param>/// <param name="accessToken">Your Access Token.</param>/// <param name="list">Your data list name.</param>/// <param name="body">Your new value JSON.</param>
    pplx::task<std::shared_ptr<AddResponse>> addPost(utility::string_t aPIKey, utility::string_t accessToken, utility::string_t list, utility::string_t body);
    /// <summary>
    /// It&#39;s used for listing a data added before.
    /// </summary>
    /// <remarks>
    /// List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
    /// </remarks>
    /// <param name="aPIKey">Your Switch API Key.</param>/// <param name="accessToken">Your Access Token.</param>/// <param name="list">Your data list name.</param>/// <param name="body">Your Switch DB Query.</param>
    pplx::task<void> listPost(utility::string_t aPIKey, utility::string_t accessToken, utility::string_t list, std::shared_ptr<Body> body);
    /// <summary>
    /// It&#39;s used for deleting a data added before at Switch DB.
    /// </summary>
    /// <remarks>
    /// List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
    /// </remarks>
    /// <param name="aPIKey">Your Switch API Key.</param>/// <param name="accessToken">Your Access Token.</param>/// <param name="list">Your data list name.</param>/// <param name="listItemId">Your list item id.</param>
    pplx::task<std::shared_ptr<SetResponse>> setDelete(utility::string_t aPIKey, utility::string_t accessToken, utility::string_t list, utility::string_t listItemId);
    /// <summary>
    /// It&#39;s used for updating a data object that is already added to Switch DB.
    /// </summary>
    /// <remarks>
    /// In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
    /// </remarks>
    /// <param name="aPIKey">Your Switch API Key.</param>/// <param name="accessToken">Your Access Token.</param>/// <param name="list">Your data list name.</param>/// <param name="listItemId">Your list item id.</param>/// <param name="body">Your new value JSON.</param>
    pplx::task<std::shared_ptr<SetResponse>> setPost(utility::string_t aPIKey, utility::string_t accessToken, utility::string_t list, utility::string_t listItemId, utility::string_t body);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* DBOperationsApi_H_ */

