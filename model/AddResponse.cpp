/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AddResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

AddResponse::AddResponse()
{
    m_ResponseTime = 0;
    m_ResponseTimeIsSet = false;
    m_Response = U("");
    m_ResponseIsSet = false;
    m_ListItemId = U("");
    m_ListItemIdIsSet = false;
    
}

AddResponse::~AddResponse()
{
}

void AddResponse::validate()
{
    // TODO: implement validation
}

web::json::value AddResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ResponseTimeIsSet)
    {
        val[U("ResponseTime")] = ModelBase::toJson(m_ResponseTime);
    }
    if(m_ResponseIsSet)
    {
        val[U("Response")] = ModelBase::toJson(m_Response);
    }
    if(m_ListItemIdIsSet)
    {
        val[U("ListItemId")] = ModelBase::toJson(m_ListItemId);
    }
    

    return val;
}

void AddResponse::fromJson(web::json::value& val)
{
    if(val.has_field(U("ResponseTime")))
    {
        setResponseTime(ModelBase::int64_tFromJson(val[U("ResponseTime")]));
    }
    if(val.has_field(U("Response")))
    {
        setResponse(ModelBase::stringFromJson(val[U("Response")]));
        
    }
    if(val.has_field(U("ListItemId")))
    {
        setListItemId(ModelBase::stringFromJson(val[U("ListItemId")]));
        
    }
    
}

void AddResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ResponseTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ResponseTime"), m_ResponseTime));
    }
    if(m_ResponseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Response"), m_Response));
        
    }
    if(m_ListItemIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ListItemId"), m_ListItemId));
        
    }
    
}

void AddResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("ResponseTime")))
    {
        setResponseTime(ModelBase::int64_tFromHttpContent(multipart->getContent(U("ResponseTime"))));
    }
    if(multipart->hasContent(U("Response")))
    {
        setResponse(ModelBase::stringFromHttpContent(multipart->getContent(U("Response"))));
        
    }
    if(multipart->hasContent(U("ListItemId")))
    {
        setListItemId(ModelBase::stringFromHttpContent(multipart->getContent(U("ListItemId"))));
        
    }
    
}


int64_t AddResponse::getResponseTime() const
{
    return m_ResponseTime;
}
void AddResponse::setResponseTime(int64_t value)
{
    m_ResponseTime = value;
    m_ResponseTimeIsSet = true;
}
bool AddResponse::ResponseTimeIsSet() const
{
    return m_ResponseTimeIsSet;
}
void AddResponse::unsetResponseTime()
{
    m_ResponseTimeIsSet = false;
}
utility::string_t AddResponse::getResponse() const
{
    return m_Response;
}
void AddResponse::setResponse(utility::string_t value)
{
    m_Response = value;
    m_ResponseIsSet = true;
}
bool AddResponse::ResponseIsSet() const
{
    return m_ResponseIsSet;
}
void AddResponse::unsetResponse()
{
    m_ResponseIsSet = false;
}
utility::string_t AddResponse::getListItemId() const
{
    return m_ListItemId;
}
void AddResponse::setListItemId(utility::string_t value)
{
    m_ListItemId = value;
    m_ListItemIdIsSet = true;
}
bool AddResponse::ListItemIdIsSet() const
{
    return m_ListItemIdIsSet;
}
void AddResponse::unsetListItemId()
{
    m_ListItemIdIsSet = false;
}

}
}
}
}

