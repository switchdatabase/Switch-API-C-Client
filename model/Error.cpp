/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Error.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Error::Error()
{
    m_ResponseTime = 0;
    m_ResponseTimeIsSet = false;
    m_Response = U("");
    m_ResponseIsSet = false;
    m_ErrorMessage = U("");
    m_ErrorMessageIsSet = false;
    
}

Error::~Error()
{
}

void Error::validate()
{
    // TODO: implement validation
}

web::json::value Error::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ResponseTimeIsSet)
    {
        val[U("ResponseTime")] = ModelBase::toJson(m_ResponseTime);
    }
    if(m_ResponseIsSet)
    {
        val[U("Response")] = ModelBase::toJson(m_Response);
    }
    if(m_ErrorMessageIsSet)
    {
        val[U("ErrorMessage")] = ModelBase::toJson(m_ErrorMessage);
    }
    

    return val;
}

void Error::fromJson(web::json::value& val)
{
    if(val.has_field(U("ResponseTime")))
    {
        setResponseTime(ModelBase::int64_tFromJson(val[U("ResponseTime")]));
    }
    if(val.has_field(U("Response")))
    {
        setResponse(ModelBase::stringFromJson(val[U("Response")]));
        
    }
    if(val.has_field(U("ErrorMessage")))
    {
        setErrorMessage(ModelBase::stringFromJson(val[U("ErrorMessage")]));
        
    }
    
}

void Error::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ResponseTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ResponseTime"), m_ResponseTime));
    }
    if(m_ResponseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Response"), m_Response));
        
    }
    if(m_ErrorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ErrorMessage"), m_ErrorMessage));
        
    }
    
}

void Error::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("ResponseTime")))
    {
        setResponseTime(ModelBase::int64_tFromHttpContent(multipart->getContent(U("ResponseTime"))));
    }
    if(multipart->hasContent(U("Response")))
    {
        setResponse(ModelBase::stringFromHttpContent(multipart->getContent(U("Response"))));
        
    }
    if(multipart->hasContent(U("ErrorMessage")))
    {
        setErrorMessage(ModelBase::stringFromHttpContent(multipart->getContent(U("ErrorMessage"))));
        
    }
    
}


int64_t Error::getResponseTime() const
{
    return m_ResponseTime;
}
void Error::setResponseTime(int64_t value)
{
    m_ResponseTime = value;
    m_ResponseTimeIsSet = true;
}
bool Error::ResponseTimeIsSet() const
{
    return m_ResponseTimeIsSet;
}
void Error::unsetResponseTime()
{
    m_ResponseTimeIsSet = false;
}
utility::string_t Error::getResponse() const
{
    return m_Response;
}
void Error::setResponse(utility::string_t value)
{
    m_Response = value;
    m_ResponseIsSet = true;
}
bool Error::ResponseIsSet() const
{
    return m_ResponseIsSet;
}
void Error::unsetResponse()
{
    m_ResponseIsSet = false;
}
utility::string_t Error::getErrorMessage() const
{
    return m_ErrorMessage;
}
void Error::setErrorMessage(utility::string_t value)
{
    m_ErrorMessage = value;
    m_ErrorMessageIsSet = true;
}
bool Error::ErrorMessageIsSet() const
{
    return m_ErrorMessageIsSet;
}
void Error::unsetErrorMessage()
{
    m_ErrorMessageIsSet = false;
}

}
}
}
}

