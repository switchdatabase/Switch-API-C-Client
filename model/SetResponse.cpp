/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SetResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SetResponse::SetResponse()
{
    m_ResponseTime = 0;
    m_ResponseTimeIsSet = false;
    m_Response = U("");
    m_ResponseIsSet = false;
    
}

SetResponse::~SetResponse()
{
}

void SetResponse::validate()
{
    // TODO: implement validation
}

web::json::value SetResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ResponseTimeIsSet)
    {
        val[U("ResponseTime")] = ModelBase::toJson(m_ResponseTime);
    }
    if(m_ResponseIsSet)
    {
        val[U("Response")] = ModelBase::toJson(m_Response);
    }
    

    return val;
}

void SetResponse::fromJson(web::json::value& val)
{
    if(val.has_field(U("ResponseTime")))
    {
        setResponseTime(ModelBase::int64_tFromJson(val[U("ResponseTime")]));
    }
    if(val.has_field(U("Response")))
    {
        setResponse(ModelBase::stringFromJson(val[U("Response")]));
        
    }
    
}

void SetResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ResponseTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ResponseTime"), m_ResponseTime));
    }
    if(m_ResponseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Response"), m_Response));
        
    }
    
}

void SetResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("ResponseTime")))
    {
        setResponseTime(ModelBase::int64_tFromHttpContent(multipart->getContent(U("ResponseTime"))));
    }
    if(multipart->hasContent(U("Response")))
    {
        setResponse(ModelBase::stringFromHttpContent(multipart->getContent(U("Response"))));
        
    }
    
}


int64_t SetResponse::getResponseTime() const
{
    return m_ResponseTime;
}
void SetResponse::setResponseTime(int64_t value)
{
    m_ResponseTime = value;
    m_ResponseTimeIsSet = true;
}
bool SetResponse::ResponseTimeIsSet() const
{
    return m_ResponseTimeIsSet;
}
void SetResponse::unsetResponseTime()
{
    m_ResponseTimeIsSet = false;
}
utility::string_t SetResponse::getResponse() const
{
    return m_Response;
}
void SetResponse::setResponse(utility::string_t value)
{
    m_Response = value;
    m_ResponseIsSet = true;
}
bool SetResponse::ResponseIsSet() const
{
    return m_ResponseIsSet;
}
void SetResponse::unsetResponse()
{
    m_ResponseIsSet = false;
}

}
}
}
}

