/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "List_order.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

List_order::List_order()
{
    m_Type = U("");
    m_TypeIsSet = false;
    m_By = U("");
    m_ByIsSet = false;
    
}

List_order::~List_order()
{
}

void List_order::validate()
{
    // TODO: implement validation
}

web::json::value List_order::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    if(m_ByIsSet)
    {
        val[U("by")] = ModelBase::toJson(m_By);
    }
    

    return val;
}

void List_order::fromJson(web::json::value& val)
{
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
        
    }
    if(val.has_field(U("by")))
    {
        setBy(ModelBase::stringFromJson(val[U("by")]));
        
    }
    
}

void List_order::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
    if(m_ByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("by"), m_By));
        
    }
    
}

void List_order::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
        
    }
    if(multipart->hasContent(U("by")))
    {
        setBy(ModelBase::stringFromHttpContent(multipart->getContent(U("by"))));
        
    }
    
}


utility::string_t List_order::getType() const
{
    return m_Type;
}
void List_order::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool List_order::typeIsSet() const
{
    return m_TypeIsSet;
}
void List_order::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t List_order::getBy() const
{
    return m_By;
}
void List_order::setBy(utility::string_t value)
{
    m_By = value;
    m_ByIsSet = true;
}
bool List_order::byIsSet() const
{
    return m_ByIsSet;
}
void List_order::unsetBy()
{
    m_ByIsSet = false;
}

}
}
}
}

